import os
import sys
import click
import pickle
import pathlib
import psutil
import traceback
import tarfile
import magic
import shutil
import yara
import re
import time
import queue
import multiprocessing
from datetime import datetime

from pprint import pprint
from exlib.utils.pathsearch import PathSearch
from exlib.utils.psutilex import wait_processes

from exlib.settings import osenv

from exlib.log.logger import MyLogger
log = MyLogger.getLogger(__package__)
log.setProcessName('malware-cli')


DEF_DATA_PATH = osenv.appdata_path() / "resource" / "malwares"

@click.group()
def app():
    pass
        

@app.command(short_help='index malware rules')
@click.argument('input_path', type=click.Path(path_type=pathlib.Path, exists=True), default=pathlib.Path("/share/digitaltwins-ng/yara/malwares/"))
@click.option('-o', '--output_path', type=click.Path(path_type=pathlib.Path, exists=False), help='output index')
@click.option('--refine', '-r', is_flag=True, help="refine names of rules.")
def index(input_path, output_path, refine):
    if not output_path:
        output_path = DEF_DATA_PATH
        output_path.mkdir(exist_ok=True, parents=True)

    all_index = []
    for repo in input_path.iterdir():
        if not repo.is_dir():
            continue

        repo_index = []
        for subdir in repo.iterdir():
            if not subdir.is_dir():
                continue

            subdir_index = []

            log.debug(f"Generating index of {subdir}")

            all_files = PathSearch.AllFiles(subdir, filter=('.yar', '.yara'))
            for filepath in all_files:                    
                if refine: # and re.search(r'[#@\-]', filepath):
                    with open(filepath, 'r') as f:
                        doc = f.read()

                    changed = False
                    for mo in re.finditer(r'rule\s+[\w#\-@]+', doc):                        
                        s, count = re.subn(r'[#\-@]', '_', mo.group(0))
                        if count:
                            doc = doc.replace(mo.group(0), s)
                            changed = True

                    # if "/defender-yara/" in filepath and "any of ($a_*)" in doc:
                    #     doc = doc.replace("any of ($a_*)", "all of ($a_*)")
                    #     changed = True

                    if changed:                    
                        with open(filepath, 'w') as f:
                            f.write(doc)

                    subdir_index.append("include \"{}\"".format(filepath))


            with (output_path / f"{repo.name}_{subdir.name}_index.yar").open('w') as f:
                f.write("/*\nGenerated at: {}\n*/\n".format(datetime.utcnow()))
                f.writelines(subdir_index)

            repo_index.extend(subdir_index)

        all_index.extend(repo_index)


    with (output_path / "index.yar").open('w') as f:
        f.write("/*\nGenerated at: {}\n*/\n".format(datetime.utcnow()))
        f.writelines(all_index)
        

@app.command(short_help='compile malware rules')
@click.option('-i', '--input_path', type=click.Path(path_type=pathlib.Path, exists=True), help='input index')
@click.option('-o', '--output_path', type=click.Path(path_type=pathlib.Path, exists=False), help='output rules')
@click.option('--test_compile', '-t', is_flag=True, help="test compiling rules.")
def compile(input_path, output_path, test_compile):
    if test_compile:
        print("test compile rules")
        if input_path and input_path.is_file():
            yara.compile(str(input_path), includes=True)
        else:
            data_path = DEF_DATA_PATH
            for filepath in data_path.iterdir():
                if filepath.name == "index.yar" or not filepath.name.endswith(('.yar', '.yara')):
                    continue
                try:
                    log.debug(f"compiling {filepath}")
                    yara.compile(str(filepath), includes=True)
                except:
                    log.exception(f"failed to compile {filepath.name}")

        return

    if not input_path:
        input_path = DEF_DATA_PATH / "index.yar"

    if not output_path:
        output_path = DEF_DATA_PATH / "rules.dat"
        output_path.parent.mkdir(exist_ok=True, parents=True)

    print(f"start compiling {input_path}, output to {output_path}")
    rules = yara.compile(str(input_path), includes=True)
    rules.save(str(output_path))




if __name__=="__main__":
    app()