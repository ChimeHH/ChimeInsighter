from exlib.export.view import RmlDocView
from exlib.export import pdf

from database.findings_database import TableThreats

from pprint import pprint

class RmlMalware(RmlDocView):
    _document = {
        "title": ["Malware", "恶意软件"],
        "introduce": ["Malware, viruses, and worms are all cyber security threats. While they are each different things, the threats they pose intersect in important ways. Malware is a catch-all term for any type of malicious software, regardless of how it works, its intent, or how it’s distributed. A virus is a specific type of malware that self-replicates by inserting its code into other programs. A worm virus refers to a malicious program that replicates itself, automatically spreading through a network. We use the Yara to identify them. It is hard to keep tracking all malware, so we share the signature library with commercial customers and encourage them to add new malware on their own and share with others.", 
                    "恶意软件、病毒和蠕虫都是网络安全威胁。虽然它们各有不同，但它们所构成的威胁在重要方面存在交集。恶意软件是所有类型恶意软件的统称，无论其工作方式、意图或分发方式如何。病毒是一种特定类型的恶意软件，它通过将其代码插入其他程序进行自我复制。蠕虫病毒是指一种可以自我复制并自动通过网络传播的恶意程序。我们使用Yara引擎来发现它们。追踪所有的恶意软件是非常困难的，因此我们面向商业用户共享恶意软件特征库，并运行他们自行添加新的恶意软件。"],
        "no_records": ["No records found", "未发现相关的记录"],

        "table_stat": ["Malware Stat Table", "恶意软件统计表"],
        "pie_stat": ["Malware Stat Chart", "恶意软件分布图"],

        "table_list": ["Malware List Table", "恶意软件清单"],

        "stat_columns": [["TYPE", "COUNT"], ["类型", "数量"]],
        "list_columns": [["NO.", "TYPE", "RULE",  "DESC","File Path"], ["编号", "类型", "规则", "描述", "路径"]],
    }    

    @classmethod
    def generate_report(cls, exporter, data_manager, version_id, lang="en", maxrows=0):
        exporter.append(exporter.draw_paragraph(f"<seq id='spam'/>.{cls.document('title', lang)}", exporter.stylesheet.Heading2))
        exporter.append(exporter.draw_paragraph(cls.document('introduce', lang), exporter.stylesheet.body))

        threats = data_manager.get_malware_threats(version_id)

        if not threats:
            exporter.append(exporter.draw_text(cls.document('no_records', lang)))
            return

        subtype_set = set([ t['sub_type'] for t in threats ])

        b_data = []

        stats = TableThreats.getThreatsStats(threats).get(TableThreats.ThreatTypes.MALWARE, {})
        for subtype in subtype_set:
            count = 0
            for k, v in stats.get(subtype, {}).items():
                count += v
            b_data.append(count)

        exporter.append(exporter.draw_paragraph(f"1) {cls.document('table_stat', lang)}", exporter.stylesheet.Heading3))
        data = [tuple(cls.document('stat_columns', lang))] + list(zip(subtype_set, b_data))
        exporter.append(exporter.draw_table(*data, col_width=[180, 80]))

        data = [tuple(cls.document('list_columns', lang)),]
        
        index = 0
        for meta in exporter.subset(threats, maxrows=maxrows):
            metadata = meta.get('metadata', {})
            desc = metadata.get('desc', "")  or ""
            rule = metadata.get('rule', "")  or ""
            
            index += 1

            path = "<br/>".join(meta['filepath'])
            line = (index, exporter.draw_cell(meta['sub_type']), exporter.draw_cell(rule), exporter.draw_cell(desc), exporter.draw_cell(path) )
            data.append(line)

        exporter.append(exporter.draw_paragraph(f"2) {cls.document('table_list', lang)}", exporter.stylesheet.Heading3))

        exporter.append(exporter.draw_table(*data, col_width=[30, 80, 150, 40, 180]))