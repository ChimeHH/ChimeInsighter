import React, { useState, useEffect } from 'react';
import { Card, Row, Col, message, Select, Button, Input } from 'antd';
import { useIntl, history } from 'umi';
import ProTable from '@ant-design/pro-table';
import type { ProColumns } from '@ant-design/pro-table';
import { getExploitList } from './service';

const { Option } = Select;

const ExploitListPage = () => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<Record<string, any>>(); 
  const [exploitTypes, setExploitTypes] = useState<string[]>([]);
  const [filterCodes, setFilterCodes] = useState<string[]>([]);
  const [filterTags, setFilterTags] = useState<string[]>([]);
  const [selectedType, setSelectedType] = useState<string>('exploit-db'); 
  const [selectedYear, setSelectedYear] = useState<number>(new Date().getFullYear());
  const [filterId, setFilterId] = useState<string>(''); 
  const [filterCode, setFilterCode] = useState<string>(''); 
  const { formatMessage } = useIntl();

  useEffect(() => {
    handleGetExploitList(selectedType, selectedYear);
  }, [selectedType, selectedYear]);

  const handleGetExploitList = async (type?: string, year?: number) => {
    if (!type || !year) return; 

    setLoading(true);
    const hide = message.loading(formatMessage({ id: 'pages.exploit.message.loading' }), 0);
    const res = await getExploitList(type, year); 
    if (res?.data) {
      hide();
      setLoading(false);
      message.success(formatMessage({ id: 'pages.exploit.getList.success' }));

      const processedData = res.data.exploits.map((item: any) => {
        const newItem = { ...item };
        newItem.id = newItem.exploit_id; 
        return newItem;
      });

      // 提取可供选择的 codes 和 tags
      const codesSet = new Set<string>();
      const tagsSet = new Set<string>();
      processedData.forEach((item: any) => {
        item.codes.forEach((code: string) => codesSet.add(code));
        item.tags.forEach((tag: string) => tagsSet.add(tag));
      });

      setResult({ ...res.data, exploits: processedData });
      setExploitTypes(res.data.exploit_types);
      setFilterCodes(Array.from(codesSet)); 
      setFilterTags(Array.from(tagsSet)); 
      return;
    }

    hide();
    setLoading(false);
  };

  const filteredData = (result?.exploits || []).filter((item: any) =>
    (!filterId || item.id.toString().includes(filterId)) &&
    (!filterTags.length || item.tags?.some(tag => filterTags.includes(tag))) &&
    (!filterCode || item.codes?.some(code => code.includes(filterCode))) 
  );

  const columns: ProColumns<any>[] = [
    {
      title: formatMessage({ id: 'pages.exploit.index.id' }),
      dataIndex: 'id',
      key: 'id',
      width: 100,
      hideInSearch: true,
      sorter: (a, b) => a.id - b.id,
    },
    {
      title: formatMessage({ id: 'pages.exploit.index.description' }),
      dataIndex: 'description',
      key: 'description',
      width: 200,
      hideInSearch: true,
      ellipsis: true,
      sorter: (a, b) => a.description.localeCompare(b.description),
    },
    {
      title: formatMessage({ id: 'pages.exploit.index.codes' }),
      dataIndex: 'codes',
      key: 'codes',
      width: 150,
      hideInSearch: true,
      render: (codes: string[]) => codes.join(', '),
    },
    {
      title: formatMessage({ id: 'pages.exploit.index.tags' }),
      dataIndex: 'tags',
      key: 'tags',
      width: 150,
      hideInSearch: true,
      render: (tags: string[]) => tags.join(', '),
    },
    {
      title: formatMessage({ id: 'pages.exploit.index.updatedDate' }),
      dataIndex: 'date_updated',
      key: 'date_updated',
      width: 150,
      hideInSearch: true,
      render: (date: string) => new Date(date).toLocaleDateString(),
    },
    {
      title: formatMessage({ id: 'pages.exploit.index.actions' }),
      key: 'action',
      width: 100,
      fixed: 'right',
      hideInSearch: true,
      render: (_, record) => (
        <Button
          type="link"
          onClick={() => history.push(`/helpcenter/exploit/${record.id}`)}
        >
          {formatMessage({ id: 'pages.exploit.index.viewDetail' })}
        </Button>
      ),
    },
  ];

  const handleTypeChange = (value: string) => {
    setSelectedType(value);
    handleGetExploitList(value, selectedYear); // 根据选择的类型重新加载数据
  };

  const handleYearChange = (value: number) => {
    setSelectedYear(value);
    handleGetExploitList(selectedType, value); // 根据选择的年份重新加载数据
  };

  return (
    <Card>
      <Row gutter={16} style={{ marginBottom: 16 }}>
        <Col span={24}>
          <h3>{formatMessage({ id: 'pages.exploit.index.title' })}</h3>
        </Col>
      </Row>
      <Row gutter={8} style={{ marginBottom: 16 }}>
        <Col span={3}>
          <Input
            style={{ width: '100%' }}
            placeholder={formatMessage({ id: 'pages.exploit.index.searchPlaceholder' })}
            value={filterId}
            onChange={(e) => setFilterId(e.target.value)}
          />
        </Col>
        <Col span={3}>
          <Select
            style={{ width: '100%' }}
            placeholder="Filter Tags"
            onChange={setFilterTags}
            mode="multiple"
            allowClear
          >
            {filterTags.map(tag => (
              <Option key={tag} value={tag}>{tag}</Option>
            ))}
          </Select>
        </Col>
        <Col span={3}>
          <Select
            style={{ width: '100%' }}
            placeholder="Filter Codes"
            onChange={setFilterCode}
            allowClear
          >
            {filterCodes.map(code => (
              <Option key={code} value={code}>{code}</Option>
            ))}
          </Select>
        </Col>
        <Col span={6} style={{ textAlign: 'right' }}>
          <Select
            style={{ width: 150, marginRight: 8 }}
            placeholder={formatMessage({ id: 'pages.exploit.index.select.type' })}
            value={selectedType}
            onChange={handleTypeChange}
          >
            {exploitTypes.map((type) => (
              <Option key={type} value={type}>{type}</Option>
            ))}
          </Select>
          <Select
            style={{ width: 100 }}
            placeholder={formatMessage({ id: 'pages.exploit.index.select.year' })}
            value={selectedYear}
            onChange={handleYearChange}
          >
            {Array.from({ length: new Date().getFullYear() - 1998 }, (_, i) => 1999 + i).map((year) => (
              <Option key={year} value={year}>{year}</Option>
            ))}
          </Select>
        </Col>
      </Row>

      <div style={{ display: 'flex', justifyContent: 'space-between' }}>
        <div style={{ flex: 1, marginRight: 24, minHeight: 400 }}>
          <Card>
            <ProTable<any>
              headerTitle={formatMessage({ id: 'pages.exploit.index.title' })}
              search={{ defaultCollapsed: false, optionRender: false, labelWidth: 120 }}
              rowKey="id"
              size="small"
              options={{
                density: false,
                fullScreen: false,
                reload: () => {
                  setLoading(true);
                  handleGetExploitList(selectedType, selectedYear);
                },
              }}
              loading={loading}
              dataSource={filteredData}
              pagination={{
                pageSize: 10,
                showQuickJumper: true,
              }}
              columns={columns}
              scroll={{ x: 410 }}
              bordered
            />
          </Card>
        </div>
      </div>
    </Card>
  );
};

export default ExploitListPage;
