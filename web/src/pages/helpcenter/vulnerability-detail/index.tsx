import React, { useState, useEffect } from 'react';
import { Descriptions, Typography } from 'antd';
import { useIntl, useParams, history } from 'umi';
import { getVulnerabilityDetail } from './service'; // 假设service.ts文件中定义了这些函数
import { VulnerabilityDetailResponse, CveDetail, CnnvdDetail, CnvdDetail, JvnDetail } from './data'; // 假设data.d.ts文件中定义了这些类型
import styles from './style.less'; // 确保 styles 被正确导入

const { Text, Paragraph } = Typography;

const VulnerabilityDetailPage = () => {
  const { id } = useParams<{ id: string }>();
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<VulnerabilityDetailResponse>();
  const { formatMessage } = useIntl();

  useEffect(() => {
    if (id) {
      handleGetVulnerabilityDetail();
    }
  }, [id]);

  const handleGetVulnerabilityDetail = async () => {
    if (!id) {
      return;
    }

    setLoading(true);
    const res = await getVulnerabilityDetail(id);
    if (res?.data) {
      setLoading(false);
      setResult(res);
      return;
    }

    setLoading(false);
  };

  const renderResult = () => {
    if (!result || !id) return null;

    const vulnerability = result.data.vulnerability;

    if (id.startsWith('CVE-')) {
      return <CveDetailView data={vulnerability as CveDetail} formatMessage={formatMessage} />;
    } else if (id.startsWith('CNNVD-')) {
      return <CnnvdDetailView data={vulnerability as CnnvdDetail} formatMessage={formatMessage} />;
    } else if (id.startsWith('CNVD-')) {
      return <CnvdDetailView data={vulnerability as CnvdDetail} formatMessage={formatMessage} />;
    } else if (id.startsWith('JVNDB')) {
      return <JvnDetailView data={vulnerability as JvnDetail} formatMessage={formatMessage} />;
    }

    return null;
  };

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between' }}>
        <div style={{ flex: 1, marginRight: 24, minHeight: 400, padding: '16px 24px' }}>
          {renderResult()}
        </div>
      </div>
    </div>
  );
};

const CveDetailView = ({ data, formatMessage }: { data?: CveDetail; formatMessage: (arg: { id: string }) => string }) => {
  if (!data) return null;

  const handleCweIdClick = (cweId: string) => {
    // 处理点击事件，例如跳转到 CWE 详情页面
    history.push(`/helpcenter/cwe/${cweId}`);
  };

  const renderProblemTypes = (problemTypes: string[]) => {
    return problemTypes.map((problemType, index) => {
      const cweRegex = /^CWE-(\d+)$/;
      const match = problemType.match(cweRegex);
      if (match) {
        return (
          <span key={index} style={{ marginRight: 8 }}>
            <a onClick={() => handleCweIdClick(problemType)} style={{ cursor: 'pointer', color: 'blue' }}>
              {problemType}
            </a>
            {index < problemTypes.length - 1 && ', '}
          </span>
        );
      }
      return <Text key={index}>{problemType}</Text>;
    });
  };

  return (
    <div>
      <div
        style={{
          backgroundColor: '#fff',
          fontWeight: 500,
          fontSize: 16,
          color: 'rgba(0,0,0,0.85)',
          padding: '16px 24px',
          marginBottom: 16,
        }}
      >
        {`${data.cve_id} / ${data.assigner}`}
      </div>

      <Descriptions className={styles.panel} column={2}>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.publishedDate' })}>
          <Text>{data.published_date}</Text>
        </Descriptions.Item>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.lastModifiedDate' })}>
          <Text>{data.last_modified_date}</Text>
        </Descriptions.Item>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.assigner' })}>
          <Text>{data.assigner}</Text>
        </Descriptions.Item>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.problemTypes' })}>
          <Paragraph>
            {renderProblemTypes(data.problem_types || [])}
          </Paragraph>
        </Descriptions.Item>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.description' })}>
          <Text>{data.description}</Text>
        </Descriptions.Item>
      </Descriptions>

      <Descriptions title={formatMessage({ id: 'pages.vulnerability.detail.cpes' })} className={styles.panel} column={1}>
        {data.cpes?.map((cpe, index) => {
          const processedCpe = Object.entries(cpe).map(([key, value]) => {
            const isSpecialKey = /[<>=!]/.test(key);
            return isSpecialKey ? `${key} ${value}` : `${value}`;
          }).join(', ');

          return (
            <Descriptions key={index} className={styles.panel} column={1}>
              <Descriptions.Item label={`CPE ${index + 1}`}>
                <Text>{processedCpe}</Text>
              </Descriptions.Item>
            </Descriptions>
          );
        }) || <Text>N/A</Text>}
      </Descriptions>

      <Descriptions title={formatMessage({ id: 'pages.vulnerability.detail.references' })} className={styles.panel} column={1}>
        {data.references?.map((reference, index) => (
          <Descriptions.Item key={index} label={`Reference ${index + 1}`}>
            <a href={reference} target="_blank" rel="noopener noreferrer" style={{ color: 'blue' }}>
              <Text style={{ color: 'blue' }}>{reference}</Text>
            </a>
          </Descriptions.Item>
        ))}
      </Descriptions>

      <Descriptions title={formatMessage({ id: 'pages.vulnerability.detail.source' })} className={styles.panel} column={1}>
        {data.source?.map((source, index) => (
          <Descriptions.Item key={index} label={`Source ${index + 1}`}>
            <Text>{source}</Text>            
          </Descriptions.Item>
        ))}
      </Descriptions>

      <div style={{ display: 'flex', justifyContent: 'space-between' }}>
        {data.metrics?.baseMetricV2 && (
          <Descriptions title={formatMessage({ id: 'pages.vulnerability.detail.baseMetricV2' })} className={styles.panel} column={1}>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.cvssV2' })}>
              <Text>{data.metrics.baseMetricV2.cvssV2.vectorString}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.baseScore' })}>
              <Text>{data.metrics.baseMetricV2.cvssV2.baseScore}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.severity' })}>
              <Text>{data.metrics.baseMetricV2.severity}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.accessVector' })}>
              <Text>{data.metrics.baseMetricV2.cvssV2.accessVector}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.accessComplexity' })}>
              <Text>{data.metrics.baseMetricV2.cvssV2.accessComplexity}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.authentication' })}>
              <Text>{data.metrics.baseMetricV2.cvssV2.authentication}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.confidentialityImpact' })}>
              <Text>{data.metrics.baseMetricV2.cvssV2.confidentialityImpact}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.integrityImpact' })}>
              <Text>{data.metrics.baseMetricV2.cvssV2.integrityImpact}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.availabilityImpact' })}>
              <Text>{data.metrics.baseMetricV2.cvssV2.availabilityImpact}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.exploitabilityScore' })}>
              <Text>{data.metrics.baseMetricV2.exploitabilityScore}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.impactScore' })}>
              <Text>{data.metrics.baseMetricV2.impactScore}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.obtainAllPrivilege' })}>
              <Text>{data.metrics.baseMetricV2.obtainAllPrivilege ? 'Yes' : 'No'}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.obtainOtherPrivilege' })}>
              <Text>{data.metrics.baseMetricV2.obtainOtherPrivilege ? 'Yes' : 'No'}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.obtainUserPrivilege' })}>
              <Text>{data.metrics.baseMetricV2.obtainUserPrivilege ? 'Yes' : 'No'}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.userInteractionRequired' })}>
              <Text>{data.metrics.baseMetricV2.userInteractionRequired ? 'Yes' : 'No'}</Text>
            </Descriptions.Item>
          </Descriptions>
        )}

        {data.metrics?.baseMetricV3 && (
          <Descriptions title={formatMessage({ id: 'pages.vulnerability.detail.baseMetricV3' })} className={styles.panel} column={1}>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.cvssV3' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.vectorString}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.baseScore' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.baseScore}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.severity' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.baseSeverity}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.attackVector' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.attackVector}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.attackComplexity' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.attackComplexity}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.privilegesRequired' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.privilegesRequired}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.userInteraction' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.userInteraction}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.scope' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.scope}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.confidentialityImpact' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.confidentialityImpact}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.integrityImpact' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.integrityImpact}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.availabilityImpact' })}>
              <Text>{data.metrics.baseMetricV3.cvssV3.availabilityImpact}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.exploitabilityScore' })}>
              <Text>{data.metrics.baseMetricV3.exploitabilityScore}</Text>
            </Descriptions.Item>
            <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.impactScore' })}>
              <Text>{data.metrics.baseMetricV3.impactScore}</Text>
            </Descriptions.Item>
          </Descriptions>
        )}
      </div>
    </div>
  );
};



const CnvdDetailView = ({ data, formatMessage }: { data?: CnvdDetail; formatMessage: (arg: { id: string }) => string }) => {
  if (!data) return null;

  return (
    <>
      <div
        style={{
          backgroundColor: '#fff',
          fontWeight: 500,
          fontSize: 16,
          color: 'rgba(0,0,0,0.85)',
          padding: '16px 24px',
          marginBottom: 16,
        }}
      >
        {`${data.cnvd_id} / ${data.title}`}
      </div>

      <Descriptions className={styles.panel} column={2}>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.description' })}>
          <Text>{data.description}</Text>
        </Descriptions.Item>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.severity' })}>
          <Text>{data.severity}</Text>
        </Descriptions.Item>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.publishedDate' })}>
          <Text>{data.openTime}</Text>
        </Descriptions.Item>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.lastModifiedDate' })}>
          <Text>{data.submitTime}</Text>
        </Descriptions.Item>
      </Descriptions>

      <Descriptions title={formatMessage({ id: 'pages.vulnerability.detail.references' })} className={styles.panel} column={2}>
        {data.cve_id?.map((cveId, index) => (
          <Descriptions.Item key={index} label={`CVE ID ${index + 1}`}>
            <a href={`https://www.cvedetails.com/cve/${cveId}/`} target="_blank" rel="noopener noreferrer" style={{ color: 'blue' }}>
              <Text style={{ color: 'blue' }}>{cveId}</Text>
            </a>
          </Descriptions.Item>
        ))}
      </Descriptions>
    </>
  );
};

const JvnDetailView = ({ data, formatMessage }: { data?: JvnDetail; formatMessage: (arg: { id: string }) => string }) => {
  if (!data) return null;

  return (
    <>
      <div
        style={{
          backgroundColor: '#fff',
          fontWeight: 500,
          fontSize: 16,
          color: 'rgba(0,0,0,0.85)',
          padding: '16px 24px',
          marginBottom: 16,
        }}
      >
        {`${data.jvn_id} / ${data.assigner}`}
      </div>

      <Descriptions className={styles.panel} column={2}>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.description' })}>
          <Text>{data.description}</Text>
        </Descriptions.Item>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.severity' })}>
          <Text>{data.metrics?.baseMetricV2?.severity || 'N/A'}</Text>
        </Descriptions.Item>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.publishedDate' })}>
          <Text>{data.published_date}</Text>
        </Descriptions.Item>
        <Descriptions.Item label={formatMessage({ id: 'pages.vulnerability.detail.lastModifiedDate' })}>
          <Text>{data.last_modified_date}</Text>
        </Descriptions.Item>
      </Descriptions>

      <Descriptions title={formatMessage({ id: 'pages.vulnerability.detail.references' })} className={styles.panel} column={2}>
        {data.references?.map((reference, index) => (
          <Descriptions.Item key={index} label={`Reference ${index + 1}`}>
            <a href={reference} target="_blank" rel="noopener noreferrer" style={{ color: 'blue' }}>
              <Text style={{ color: 'blue' }}>{reference}</Text>
            </a>
          </Descriptions.Item>
        ))}
      </Descriptions>
    </>
  );
};

export default VulnerabilityDetailPage;
