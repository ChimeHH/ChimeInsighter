import React, { useEffect, useState } from 'react';
import { Descriptions, Typography } from 'antd';
import { useIntl, useParams, history } from 'umi';
import { getExploitDetail } from './service';
import { ExploitResponse } from './data';
import styles from './style.less'; 

const { Text, Paragraph } = Typography;

const baseMessageId = 'pages.exploit.detail';

const ExploitDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<ExploitResponse>();
  const { formatMessage } = useIntl();

  useEffect(() => {
    if (id) {
      handleGetExploitDetail();
    }
  }, [id]);

  const handleGetExploitDetail = async () => {
    if (!id) return;

    setLoading(true);
    const res = await getExploitDetail(id);
    if (res?.data) {
      setLoading(false);
      setResult(res);
      return;
    }

    setLoading(false);
  };

  const renderResult = () => {
    if (!result || !id) return null;

    const exploit = result.data.exploit;

    return (
      <div>
        <Descriptions className={styles.panel} column={2}>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.description` })} span={2}>
            <Text>{exploit.description}</Text>
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.codes` })} span={2}>
            {exploit.codes && exploit.codes.length > 0 ? (
              exploit.codes.map((code, index) => (
                <Text key={index}>
                  {code.startsWith('CVE-') ? (
                    <a onClick={() => history.push(`/helpcenter/vulnerability/${code}`)}>
                      {code}
                    </a>
                  ) : (
                    code
                  )}
                  {index < exploit.codes.length - 1 && ', '}
                </Text>
              ))
            ) : (
              <Text>N/A</Text>
            )}
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.author` })}>
            <Text>{exploit.author}</Text>
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.dateAdded` })}>
            <Text>{exploit.date_added}</Text>
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.applicationUrl` })}>
            <Text>{exploit.application_url}</Text>
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.datePublished` })}>
            <Text>{exploit.date_published}</Text>
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.platform` })}>
            <Text>{exploit.platform}</Text>
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.dateUpdated` })}>
            <Text>{exploit.date_updated}</Text>
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.type` })}>
            <Text>{exploit.type}</Text>
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.port` })}>
            <Text>{exploit.port}</Text>
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.verified` })}>
            <Text>{exploit.verified === 0 ? formatMessage({ id: `${baseMessageId}.verified.no` }) : formatMessage({ id: `${baseMessageId}.verified.yes` })}</Text>
          </Descriptions.Item>
          <Descriptions.Item label={formatMessage({ id: `${baseMessageId}.tags` })}>
            <Text>{exploit.tags.join(', ')}</Text>
          </Descriptions.Item>
        </Descriptions>

        {exploit.file && (
          <div style={{ marginTop: 16 }}>
            <Text strong>{formatMessage({ id: `${baseMessageId}.file` })}:</Text>
            <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>
              <code>{exploit.file}</code>
            </pre>
          </div>
        )}

        {exploit.source_url && (
          <Paragraph>
            <Text strong>{formatMessage({ id: `${baseMessageId}.sourceUrl` })}:</Text>
            <a href={exploit.source_url} target="_blank" rel="noopener noreferrer">
              {exploit.source_url}
            </a>
          </Paragraph>
        )}
      </div>
    );
  };

  return (
    <div>
      <div>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <div style={{ flex: 1, marginRight: 24, minHeight: 400, padding: '16px 24px' }}>
            {loading ? <Text>{formatMessage({ id: 'pages.exploit.loading' })}</Text> : renderResult()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExploitDetailPage;
