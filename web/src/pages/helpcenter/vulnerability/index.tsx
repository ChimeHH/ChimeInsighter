import React, { useState, useEffect } from 'react';
import { Card, Row, Col, message, Select, Button, Input } from 'antd';
import { useIntl, history } from 'umi';
import ProTable from '@ant-design/pro-table';
import type { ProColumns } from '@ant-design/pro-table';
import { getVulnerabilityList } from './service'; // 假设service.ts文件中定义了getVulnerabilityList函数

const { Option } = Select;

const VulnerabilityListPage = () => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<Record<string, any>>();
  const [vulnerabilityTypes, setVulnerabilityTypes] = useState<string[]>([]);
  const [selectedType, setSelectedType] = useState<string>('cve'); // 默认选择CVE类型
  const [selectedYear, setSelectedYear] = useState<number>(new Date().getFullYear());
  const [filterId, setFilterId] = useState<string>(''); // 新增状态
  const { formatMessage } = useIntl();

  useEffect(() => {
    handleGetVulnerabilityList('cve', new Date().getFullYear()); // 默认进入页面时，取当前年份的CVE类型
  }, []);

  const handleGetVulnerabilityList = async (type?: string, year?: number) => {
    if (!type || !year) return; // 只有当类型和年份都有效时才触发API查询

    setLoading(true);
    const hide = message.loading(formatMessage({ id: 'pages.vulnerability.message.loading' }), 0);
    const res = await getVulnerabilityList(type, year);
    if (res?.data) {
      hide();
      setLoading(false);
      message.success(formatMessage({ id: 'pages.vulnerability.getList.success' }));

      // 预处理数据
      const processedData = res.data.vulnerabilities.map((item: any) => {
        const newItem = { ...item };
        if (type === 'cve') {
          newItem.id = newItem.cve_id;
          delete newItem.cve_id;
        } else if (type === 'cnnvd') {
          newItem.id = newItem.cnnvd_id;
          delete newItem.cnnvd_id;
        } else {
          // 处理其他情况
          Object.keys(newItem).forEach((key) => {
            if (key.endsWith('_id')) {
              newItem.id = newItem[key];
              delete newItem[key];
            }
          });
        }
        return newItem;
      });

      setResult({ ...res.data, vulnerabilities: processedData });
      setVulnerabilityTypes(res.data.vulnerability_types);
      return;
    }

    hide();
    setLoading(false);
  };

  const handleTypeChange = (value: string) => {
    setSelectedType(value);
    if (value && selectedYear) {
      handleGetVulnerabilityList(value, selectedYear);
    }
  };

  const handleYearChange = (value: number) => {
    setSelectedYear(value);
    if (selectedType && value) {
      handleGetVulnerabilityList(selectedType, value);
    }
  };

  const handleIdFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFilterId(e.target.value);
  };

  const filteredData = result?.vulnerabilities?.filter((item: any) =>
    item.id.toString().includes(filterId)
  ) || [];

  const columns: ProColumns<any>[] = [
    {
      title: formatMessage({ id: 'pages.vulnerability.index.id' }),
      dataIndex: 'id',
      key: 'id',
      width: 100,
      hideInSearch: true,
      sorter: (a, b) => a.id - b.id,
    },
    {
      title: formatMessage({ id: 'pages.vulnerability.index.description' }),
      dataIndex: 'description',
      key: 'description',
      width: 200,
      hideInSearch: true,
      ellipsis: true,
      sorter: (a, b) => a.description.localeCompare(b.description),
    },    
    {
      title: formatMessage({ id: 'pages.vulnerability.index.actions' }),
      key: 'action',
      width: 100,
      fixed: 'right',
      hideInSearch: true,
      render: (_, record) => (
        <Button
          type="link"
          onClick={() => history.push(`/helpcenter/vulnerability/${record.id}`)}
        >
          {formatMessage({ id: 'pages.vulnerability.index.viewDetail' })}
        </Button>
      ),
    },
  ];

  return (
    <Card>
      <Row gutter={16} style={{ marginBottom: 16 }}>
        <Col span={24}>
          <h3>{formatMessage({ id: 'pages.vulnerability.index.title' })}</h3>
        </Col>
      </Row>
      <Row gutter={16} style={{ marginBottom: 16 }}>
        <Col span={8}>
          <Input
            style={{ width: '100%' }}
            placeholder={formatMessage({ id: 'pages.vulnerability.index.searchPlaceholder' })}
            value={filterId}
            onChange={handleIdFilterChange}
          />
        </Col>
        <Col span={8} offset={8} style={{ textAlign: 'right' }}>
          <Select
            style={{ width: 200, marginRight: 16 }}
            placeholder={formatMessage({ id: 'pages.vulnerability.index.select.type' })}
            value={selectedType}
            onChange={handleTypeChange}
          >
            {vulnerabilityTypes.map((type) => (
              <Option key={type} value={type}>
                {type}
              </Option>
            ))}
          </Select>
          <Select
            style={{ width: 200 }}
            placeholder={formatMessage({ id: 'pages.vulnerability.index.select.year' })}
            value={selectedYear}
            onChange={handleYearChange}
          >
            {Array.from({ length: new Date().getFullYear() - 1998 }, (_, i) => 1999 + i).map((year) => (
              <Option key={year} value={year}>
                {year}
              </Option>
            ))}
          </Select>
        </Col>
      </Row>
      <div style={{ display: 'flex', justifyContent: 'space-between' }}>
        <div style={{ flex: 1, marginRight: 24, minHeight: 400 }}>
          <Card>
            <ProTable<any>
              headerTitle={formatMessage({ id: 'pages.vulnerability.index.title' })}
              search={{ defaultCollapsed: false, optionRender: false, labelWidth: 120 }}
              rowKey="id"
              size="small"
              options={{
                density: false,
                fullScreen: false,
                reload: () => {
                  setLoading(true);
                  handleGetVulnerabilityList();
                },
              }}
              loading={loading}
              dataSource={filteredData}
              pagination={{
                pageSize: 10,
                showQuickJumper: true,
              }}
              columns={columns}
              scroll={{ x: 410 }}
              bordered
            />
          </Card>
        </div>
      </div>
    </Card>
  );
};

export default VulnerabilityListPage;
